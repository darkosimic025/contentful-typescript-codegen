{"code":"import { __awaiter, __generator } from \"tslib\";\r\nimport render from \"./renderers/render\";\r\nimport renderFieldsOnly from \"./renderers/renderFieldsOnly\";\r\nimport path from \"path\";\r\nimport { outputFileSync } from \"fs-extra\";\r\nimport { loadEnvironment } from \"./loadEnvironment\";\r\nvar meow = require(\"meow\");\r\nvar cli = meow(\"\\n  Usage\\n    $ contentful-typescript-codegen --output <file> <options>\\n\\n  Options\\n    --output,      -o  Where to write to\\n    --poll,        -p  Continuously refresh types\\n    --interval N,  -i  The interval in seconds at which to poll (defaults to 15)\\n    --namespace N, -n  Wrap types in namespace N (disabled by default)\\n    --fields-only      Output a tree that _only_ ensures fields are valid\\n                       and present, and does not provide types for Sys,\\n                       Assets, or Rich Text. This is useful for ensuring raw\\n                       Contentful responses will be compatible with your code.\\n    --localization -l  Output fields with localized values\\n\\n  Examples\\n    $ contentful-typescript-codegen -o src/@types/generated/contentful.d.ts\\n\", {\r\n    flags: {\r\n        output: {\r\n            type: \"string\",\r\n            alias: \"o\",\r\n            isRequired: true,\r\n        },\r\n        fieldsOnly: {\r\n            type: \"boolean\",\r\n            isRequired: false,\r\n        },\r\n        poll: {\r\n            type: \"boolean\",\r\n            alias: \"p\",\r\n            isRequired: false,\r\n        },\r\n        interval: {\r\n            type: \"string\",\r\n            alias: \"i\",\r\n            isRequired: false,\r\n        },\r\n        namespace: {\r\n            type: \"string\",\r\n            alias: \"n\",\r\n            isRequired: false,\r\n        },\r\n        localization: {\r\n            type: \"boolean\",\r\n            alias: \"l\",\r\n            isRequired: false,\r\n        },\r\n    },\r\n});\r\nfunction runCodegen(outputFile) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _a, contentTypes, locales, outputPath, output;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, loadEnvironment()];\r\n                case 1:\r\n                    _a = _b.sent(), contentTypes = _a.contentTypes, locales = _a.locales;\r\n                    outputPath = path.resolve(process.cwd(), outputFile);\r\n                    if (!cli.flags.fieldsOnly) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, renderFieldsOnly(contentTypes.items, { namespace: cli.flags.namespace })];\r\n                case 2:\r\n                    output = _b.sent();\r\n                    return [3 /*break*/, 5];\r\n                case 3: return [4 /*yield*/, render(contentTypes.items, locales.items, {\r\n                        localization: cli.flags.localization,\r\n                        namespace: cli.flags.namespace,\r\n                    })];\r\n                case 4:\r\n                    output = _b.sent();\r\n                    _b.label = 5;\r\n                case 5:\r\n                    outputFileSync(outputPath, output);\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nrunCodegen(cli.flags.output).catch(function (error) {\r\n    console.error(error);\r\n    process.exit(1);\r\n});\r\nif (cli.flags.poll) {\r\n    var intervalInSeconds = parseInt(cli.flags.interval, 10);\r\n    if (!isNaN(intervalInSeconds) && intervalInSeconds > 0) {\r\n        setInterval(function () { return runCodegen(cli.flags.output); }, intervalInSeconds * 1000);\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a positive numeric interval, but got \" + cli.flags.interval);\r\n    }\r\n}\r\n//# sourceMappingURL=contentful-typescript-codegen.js.map","references":["/Users/darkosimic/Documents/Workshop_1/contentful-typescript-codegen/src/renderers/render.ts","/Users/darkosimic/Documents/Workshop_1/contentful-typescript-codegen/src/renderers/renderFieldsOnly.ts","/Users/darkosimic/Documents/Workshop_1/contentful-typescript-codegen/node_modules/@types/fs-extra/index.d.ts","/Users/darkosimic/Documents/Workshop_1/contentful-typescript-codegen/src/loadEnvironment.ts","/Users/darkosimic/Documents/Workshop_1/contentful-typescript-codegen/node_modules/meow/index.d.ts","/Users/darkosimic/Documents/Workshop_1/contentful-typescript-codegen/src/loadEnvironment.ts"],"map":"{\"version\":3,\"file\":\"contentful-typescript-codegen.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/contentful-typescript-codegen.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,MAAM,MAAM,oBAAoB,CAAA;AACvC,OAAO,gBAAgB,MAAM,8BAA8B,CAAA;AAC3D,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAA;AACzC,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAA;AAEnD,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAI5B,IAAM,GAAG,GAAG,IAAI,CACd,yxBAiBD,EACC;IACE,KAAK,EAAE;QACL,MAAM,EAAE;YACN,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,GAAG;YACV,UAAU,EAAE,IAAI;SACjB;QACD,UAAU,EAAE;YACV,IAAI,EAAE,SAAS;YACf,UAAU,EAAE,KAAK;SAClB;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,GAAG;YACV,UAAU,EAAE,KAAK;SAClB;QACD,QAAQ,EAAE;YACR,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,GAAG;YACV,UAAU,EAAE,KAAK;SAClB;QACD,SAAS,EAAE;YACT,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,GAAG;YACV,UAAU,EAAE,KAAK;SAClB;QACD,YAAY,EAAE;YACZ,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,GAAG;YACV,UAAU,EAAE,KAAK;SAClB;KACF;CACF,CACF,CAAA;AAED,SAAe,UAAU,CAAC,UAAkB;;;;;wBACR,qBAAM,eAAe,EAAE,EAAA;;oBAAnD,KAA4B,SAAuB,EAAjD,YAAY,kBAAA,EAAE,OAAO,aAAA;oBACvB,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,CAAA;yBAGtD,GAAG,CAAC,KAAK,CAAC,UAAU,EAApB,wBAAoB;oBACb,qBAAM,gBAAgB,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,EAAA;;oBAAvF,MAAM,GAAG,SAA8E,CAAA;;wBAE9E,qBAAM,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE;wBACvD,YAAY,EAAE,GAAG,CAAC,KAAK,CAAC,YAAY;wBACpC,SAAS,EAAE,GAAG,CAAC,KAAK,CAAC,SAAS;qBAC/B,CAAC,EAAA;;oBAHF,MAAM,GAAG,SAGP,CAAA;;;oBAGJ,cAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;;;;;CACnC;AAED,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,UAAA,KAAK;IACtC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IACpB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACjB,CAAC,CAAC,CAAA;AAEF,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;IAClB,IAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;IAE1D,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,iBAAiB,GAAG,CAAC,EAAE;QACtD,WAAW,CAAC,cAAM,OAAA,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,EAA5B,CAA4B,EAAE,iBAAiB,GAAG,IAAI,CAAC,CAAA;KAC1E;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,mDAAiD,GAAG,CAAC,KAAK,CAAC,QAAU,CAAC,CAAA;KACvF;CACF\"}","dts":{"name":"/Users/darkosimic/Documents/Workshop_1/contentful-typescript-codegen/dist/types/contentful-typescript-codegen.d.ts","writeByteOrderMark":false,"text":"export { ContentfulEnvironment, EnvironmentGetter } from \"./loadEnvironment\";\r\n"}}
